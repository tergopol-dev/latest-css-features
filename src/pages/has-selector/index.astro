---
import Layout from "../../layouts/Layout.astro";
---

<Layout
  title="HD's Round Table: The :has() Selector"
  mainNavConfiguration={{
    linkSource: "/has-selector/example",
    linkTitle: "Example",
  }}
>
  <section class="container prose lg:prose-lg">
    <h1 class="text-4xl">The <code>:has()</code> Selector</h1>
    <p>
      The CSS <code>:has()</code> selector allows you to select elements that contain
      elements matching the selector you pass into the <code>:has()</code> function.
      It functions as a "parent" selector, but with more versatility.
    </p>
    <p>
      The <code>:has()</code> pseudo-class inherits the specificity of the most specific
      selector in its arguments, similar to <a
        href="https://developer.mozilla.org/en-US/docs/Web/CSS/:is"
        rel="noopener noreferrer"
        target="_blank"><code>:is()</code></a
      > and <a
        href="https://developer.mozilla.org/en-US/docs/Web/CSS/:not"
        rel="noopener noreferrer"
        target="_blank"><code>:not()</code></a
      >.
    </p>
    <p>
      It cannot be nested within another <code>:has()</code> selector. This is because
      pseudo-elements often depend on the styling of their ancestors, and allowing
      them to be queried by <code>:has()</code> could lead to cyclic querying. Pseudo-elements
      are also not valid selectors within <code>:has()</code>, and
      pseudo-elements cannot be used as anchors for <code>:has()</code>.
    </p>
    <p>
      When using comma-separated values inside the <code>:has()</code> selector,
      you are checking if any of the parameters exist. <code>x:has(a, b)</code> will
      style x if descendant a OR b exists. By chaining multiple <code
        >:has()</code
      > selectors together, you are checking if all of the parameters exist. <code
        >x:has(a):has(b)</code
      >
      will style x if descendant a AND b exist.
    </p>
  </section>
</Layout>
