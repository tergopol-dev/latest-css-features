---
import Layout from "../../layouts/Layout.astro";
---

<!-- TODO: Add toggle component to show Can I Use embed on demand and load script dynamically to improve performance. -->
<script
  src="https://cdn.jsdelivr.net/gh/ireade/caniuse-embed/public/caniuse-embed.min.js"
></script>

<Layout
  title="HD's Round Table: CSS Nesting"
  mainNavConfiguration={{
    linkSource: "/css-nesting/example",
    linkTitle: "Example",
  }}
>
  <section class="container prose lg:prose-lg">
    <h1 class="text-4xl">CSS Nesting</h1>
    <p
      class="ciu_embed"
      data-feature="css-nesting"
      data-periods="future_1,current,past_1,past_2"
      data-accessible-colours="false"
    >
      <picture>
        <source
          type="image/webp"
          srcset="https://caniuse.bitsofco.de/image/css-nesting.webp"
        />
        <source
          type="image/png"
          srcset="https://caniuse.bitsofco.de/image/css-nesting.png"
        />
        <img
          src="https://caniuse.bitsofco.de/image/css-nesting.jpg"
          alt="Data on support for the css-nesting feature across the major browsers from caniuse.com"
        />
      </picture>
    </p>
    <p>
      The CSS nesting module introduces a syntax for nesting selectors, allowing
      one style rule to be nested inside another, with the child rule's selector
      relative to the parent rule's selector. CSS nesting is different from CSS
      preprocessors like <a
        href="https://sass-lang.com/"
        rel="noopener noreferrer"
        target="_blank">Sass</a
      > because it is parsed by the browser instead of being pre-compiled by a CSS
      preprocessor.
    </p>
    <p>
      The CSS <code>&</code> nesting selector explicitly defines the relationship
      between parent and child rules when using <a
        href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_nesting"
        rel="noopener noreferrer"
        target="_blank">CSS nesting</a
      >. It makes the nested child rule selectors relative to the parent
      element. The child rule selectors have the same
      <a
        href="https://developer.mozilla.org/en-US/docs/Web/CSS/Specificity"
        rel="noopener noreferrer"
        target="_blank">specificity</a
      > weight as if they were within <a
        href="https://developer.mozilla.org/en-US/docs/Web/CSS/:is"
        rel="noopener noreferrer"
        target="_blank"><code>:is()</code></a
      >. Many CSS class naming conventions rely on nesting to concatenate or
      append selectors as if they were strings (e.g., <code is:raw
        >&--modifier { ... }</code
      >). However, this does not work in CSS nesting because the selectors are
      not treated as strings; they are treated as object references.
    </p>
  </section>
</Layout>
